Description: fix Deja Vu replay attack on authenticated broadcast mode
Origin: backport, https://github.com/ntp-project/ntp/commit/f6a0225a9fc6ba82268d0d69a8a4eab788889262
Origin: backport, https://github.com/ntp-project/ntp/commit/c801a6a5f84d7f385a42e0073c94b2e0664f8ad2
Origin: backport, https://github.com/ntp-project/ntp/commit/50ef2f62dc326bc9edac166b2b4ba5b5d8b4f7d4
Bug: http://support.ntp.org/bin/view/Main/NtpBug2935

Index: ntp-4.2.6.p3+dfsg/include/ntp.h
===================================================================
--- ntp-4.2.6.p3+dfsg.orig/include/ntp.h	2016-06-01 12:26:51.694818823 -0400
+++ ntp-4.2.6.p3+dfsg/include/ntp.h	2016-06-01 12:26:51.690818771 -0400
@@ -350,6 +350,7 @@
 	l_fp	dst;		/* destination timestamp */
 	l_fp	aorg;		/* origin timestamp */
 	l_fp	borg;		/* alternate origin timestamp */
+	l_fp	bxmt;		/* most recent broadcast transmit timestamp */
 	double	offset;		/* peer clock offset */
 	double	delay;		/* peer roundtrip delay */
 	double	jitter;		/* peer jitter (squares) */
@@ -384,7 +385,8 @@
 	 * Statistic counters
 	 */
 	u_long	timereset;	/* time stat counters were reset */
-	u_long	timereceived;	/* last packet received time */
+	u_long	timelastrec;	/* last packet received time */
+	u_long	timereceived;	/* last (clean) packet received time */
 	u_long	timereachable;	/* last reachable/unreachable time */
 
 	u_long	sent;		/* packets sent */
Index: ntp-4.2.6.p3+dfsg/ntpd/ntp_proto.c
===================================================================
--- ntp-4.2.6.p3+dfsg.orig/ntpd/ntp_proto.c	2016-06-01 12:26:51.694818823 -0400
+++ ntp-4.2.6.p3+dfsg/ntpd/ntp_proto.c	2016-06-01 12:26:51.690818771 -0400
@@ -882,6 +882,7 @@
 			} else {
 				peer->delay = sys_bdelay;
 				peer->bias = -sys_bdelay / 2.;
+				peer->bxmt = p_xmt;
 			}
 			break;
 		}
@@ -901,6 +902,7 @@
 			sys_restricted++;
 			return;			/* ignore duplicate */
 		}
+		peer->bxmt = p_xmt;
 #ifdef OPENSSL
 		if (skeyid > NTP_MAXKEY)
 			crypto_recv(peer, rbufp);
@@ -988,6 +990,72 @@
 	 * Process regular packet. Nothing special.
 	 */
 	case AM_PROCPKT:
+		if (MODE_BROADCAST == hismode) {
+			u_char poll;
+			int bail = 0;
+			l_fp tdiff;
+
+			DPRINTF(2, ("receive: PROCPKT/BROADCAST: prev pkt %ld seconds ago, ppoll: %d, %d secs\n",
+				    (current_time - peer->timelastrec),
+				    peer->ppoll, (1 << peer->ppoll)
+				    ));
+			/* Things we can check:
+			 *
+			 * Did the poll interval change?
+			 * Is the poll interval in the packet in-range?
+			 * Did this packet arrive too soon?
+			 * Is the timestamp in this packet monotonic
+			 *  with respect to the previous packet?
+			 */
+
+			/* This is noteworthy, not error-worthy */
+			if (pkt->ppoll != peer->ppoll) {
+				msyslog(LOG_INFO, "receive: broadcast poll from %s changed from %ud to %ud",
+					stoa(&rbufp->recv_srcadr),
+					peer->ppoll, pkt->ppoll);
+			}
+
+			poll = min(peer->maxpoll,
+				   max(peer->minpoll, pkt->ppoll));
+
+			/* This is error-worthy */
+			if (pkt->ppoll != poll) {
+				msyslog(LOG_INFO, "receive: broadcast poll of %ud from %s is out-of-range (%d to %d)!",
+					pkt->ppoll, stoa(&rbufp->recv_srcadr),
+					peer->minpoll, peer->maxpoll);
+				++bail;
+			}
+
+			if (  (current_time - peer->timelastrec)
+			    < (1 << pkt->ppoll)) {
+				msyslog(LOG_INFO, "receive: broadcast packet from %s arrived after %ld, not %d seconds!",
+					stoa(&rbufp->recv_srcadr),
+					(current_time - peer->timelastrec),
+					(1 << pkt->ppoll)
+					);
+				++bail;
+			}
+
+			tdiff = p_xmt;
+			L_SUB(&tdiff, &peer->bxmt);
+			if (tdiff.l_i < 0) {
+				msyslog(LOG_INFO, "receive: broadcast packet from %s contains non-monotonic timestamp: %#010x.%08x -> %#010x.%08x",
+					stoa(&rbufp->recv_srcadr),
+					peer->bxmt.l_ui, peer->bxmt.l_uf,
+					p_xmt.l_ui, p_xmt.l_uf
+					);
+				++bail;
+			}
+
+			peer->bxmt = p_xmt;
+
+			if (bail) {
+				peer->timelastrec = current_time;
+				sys_declined++;
+				return;
+			}
+		}
+
 		break;
 
 	/*
@@ -1179,6 +1247,7 @@
 	 * clean. Get on with real work.
 	 */
 	peer->timereceived = current_time;
+	peer->timelastrec = current_time;
 	if (is_authentic == AUTH_OK)
 		peer->flags |= FLAG_AUTHENTIC;
 	else
